// Selection
// ---
@mixin selection($color, $background) {
    $prefixes: (
        '-moz-',
        '-webkit-',
        '-o-',
        '-ms-',
        ''
    );
    @each $prefix in $prefixes {
        &::#{$prefix}selection {
            background: $background;
            color: $color;
        }
    }
}

// String Replace
// ---
@function str-replace($string, $search, $replace: '') {
    $index: str-index($string, $search);
    @if $index {
        @return str-slice($string, 1, $index - 1) + $replace + str-replace(str-slice($string, $index + str-length($search)), $search, $replace);
    }
    @return $string;
}

// Font Face
// ---
@mixin font-face($name, $path, $weight: null, $style: null, $exts: eot woff2 woff ttf svg, $display: auto) {
    $extmods: (
        eot: '?',
        svg: '#' + str-replace($name, ' ', '_')
    );
    $formats: (
        otf: 'opentype',
        ttf: 'truetype'
    );
    $src: null;
    @each $ext in $exts {
        $extmod: if(map-has-key($extmods, $ext), $ext + map-get($extmods, $ext), $ext);
        $format: if(map-has-key($formats, $ext), map-get($formats, $ext), $ext);
        $src: append($src, url(quote($path + '.' + $extmod)) format(quote($format)), comma);
    }
    @font-face {
        font-display: $display;
        font-family: quote($name);
        font-style: $style;
        font-weight: $weight;
        src: $src;
    }
}

// Font Size
// ---
// This will output `rem` unit font-size and `px` as fallback
@function calculate-rem($size) {
    $remSize: #{$size / 18 * 1};
    @return #{$remSize}rem;
}
@mixin font-size($size) {
    font-size: #{$size}px;
    font-size: calculate-rem($size);
}

// Visible
// param: `hide` & `show`
// ---
@mixin visibility($value) {
    @if $value == hide {
        opacity: 0;
        visibility: hidden;
    } @else if $value == show {
        opacity: 1;
        visibility: visible;
    }
}

// Keep Aspect Ratio of container
@mixin aspect-ratio($width, $height) {
    padding-bottom: ($height / $width) * 100%;
}

// Overlay tranparent
// ---
@mixin overlay-transparent($color, $opacity, $zindex: auto) {
    background: rgba($color, $opacity);
    content: '';
    display: block;
    height: 100%;
    left: 0;
    opacity: 0;
    position: absolute;
    top: 0;
    transition: opacity .3s ease;
    width: 100%;
    z-index: $zindex;
}

// Border
// ---
@mixin border($pos, $width, $style, $color) {
    border-#{pos}: $width $style $color;
}

// Enable hardware acceleration
@mixin accelerate {
    backface-visibility: hidden;
    // perspective: 1000px;
    transform: translateZ(0);
}

// Gradient Linear background
@mixin gradient-linear($direction, $color1, $color2) {
    background: linear-gradient(to $direction, $color1, $color2);
}
